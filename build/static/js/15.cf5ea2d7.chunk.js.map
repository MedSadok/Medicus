{"version":3,"sources":["containers/appointments/views/waitingRoom.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","containers/appointments/lists.js"],"names":["WaitingRoomView","props","session","useSelector","s","useState","searchQuery","setSearchQuery","showNewAppointment","Boolean","isPhysician","title","handleSearch","placeholder","path","icon","className","view","search","defaultMessage","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","DateItem","date","long","DefaultItem","message","ListView","groupByStartTimeMap","Map","appointments","appointment","startDate","Date","startTime","toDateString","has","set","get","push","appointmentGroupItems","size","entries","groupDate","groupItem","map","index","id","deleteAppointment","listView","InfiniteAppointmentList","getAppointments","useCallback","a","page","limit","searchParams","URLSearchParams","append","fetch","toString","headers","authToken","response","json","ok","Error","state","setState","Math","ceil","length","newAppointments","prevState","updatedAppointments","console","error","filter","err","useEffect","load","callback"],"mappings":"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","file":"static/js/15.cf5ea2d7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Col, Row } from '../../../components/layout';\n\nimport TitleBar, { TitleBarLink, TitleBarLinks, TitleBarSearch } from '../../home/titleBar';\nimport InfiniteAppointmentList from '../lists';\n\n\nexport default function WaitingRoomView(props) {\n    const session = useSelector(s => s.session);\n    const [searchQuery, setSearchQuery] = useState(\"\");\n\n    const showNewAppointment = !Boolean(session.isPhysician);\n\n    return (\n        <>\n            <TitleBar title=\"Waiting Room\">\n                <TitleBarSearch\n                    handleSearch={setSearchQuery}\n                    placeholder=\"Search appointments...\"\n                />\n                <TitleBarLinks>\n                    {showNewAppointment &&\n                        <TitleBarLink\n                            path=\"/appointments?view=new\"\n                            title=\"New Appointment\"\n                            icon=\"add\"\n                        />\n                    }\n                </TitleBarLinks>\n            </TitleBar>\n            <Row className=\"flex-grow-1\">\n                <Col>\n                    <InfiniteAppointmentList \n                        view=\"waiting\"\n                        search={searchQuery}\n                        defaultMessage=\"Hurray! You've caught up with all your appointments.\"\n                    />\n                </Col>\n            </Row>\n        </>\n    );\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { PrettyDate } from '../../components/dates';\nimport { Col, FluidContainer, Row } from '../../components/layout';\nimport { List, ListItem } from '../../components/lists';\nimport { AutoLoader } from '../../components/loaders';\n\nimport Appointment from './appointment';\n\n\nfunction DateItem(props) {\n    return (\n        <FluidContainer className=\"md-appt-date p-3\">\n            <Row className=\"justify-content-center\">\n                <Col className=\"col-auto align-items-center\">\n                    <h6 className=\"my-0\">\n                        <PrettyDate date={props.date} long={true}/>\n                    </h6>\n                </Col>\n            </Row>\n        </FluidContainer>\n    );\n}\n\n\nfunction DefaultItem(props) {\n    return (\n        <Row className=\"justify-content-center\">\n            <Col className=\"col-auto align-items-center\">\n                <h6 className=\"my-0 py-3 text-muted\">\n                    {props.message}\n                </h6>\n            </Col>\n        </Row>\n    );\n}\n\n\nfunction ListView(props) {\n    const groupByStartTimeMap = new Map();\n    for (const appointment of props.appointments) {\n        const appointmentStartTime = new Date(appointment.startTime);\n        const startDate = appointmentStartTime.toDateString();\n\n        if (!groupByStartTimeMap.has(startDate)) {\n            groupByStartTimeMap.set(startDate, []);\n        }\n        groupByStartTimeMap.get(startDate).push(appointment);\n    }\n\n    const appointmentGroupItems = [];\n    if (groupByStartTimeMap.size > 0) {\n        for (const [startDate, appointments] of groupByStartTimeMap.entries()) {\n            let groupDate = new Date(startDate);\n\n            let groupItem = (\n                <Row>\n                    <Col className=\"px-0\">\n                        <DateItem\n                            date={groupDate}\n                        />\n                        <List className=\"md-list\">\n                            {appointments.map((appointment, index) => (\n                                <ListItem key={index} className=\"p-0 my-1\">\n                                    <Appointment\n                                        session={props.session}\n                                        id={appointment.id}\n                                        deleteAppointment={props.deleteAppointment}\n                                        listView={true}\n                                    />\n                                </ListItem>\n                            ))}\n                        </List>\n                    </Col>\n                </Row>\n            );\n\n            appointmentGroupItems.push(groupItem);\n        }\n        \n    } else {\n        appointmentGroupItems.push(\n            <DefaultItem message={props.defaultMessage} />\n        );\n    }\n\n    return (\n        <FluidContainer>\n            {appointmentGroupItems}\n        </FluidContainer>\n    );\n}\n\n\nexport default function InfiniteAppointmentList(props) {\n    const session = useSelector(s => s.session);\n\n    const getAppointments = useCallback(async ({view='', search='', page=0, limit=10}) => {\n        try {\n            const searchParams = new URLSearchParams();\n            (view) && searchParams.append('view', view);\n            (search) && searchParams.append('search', search);\n            searchParams.append('page', page);\n            searchParams.append('limit', limit);\n\n            const response = await fetch(`/api/appointments?${searchParams.toString()}`, {\n                headers: {\n                  'Authorization': `Bearer ${session.authToken}`\n                }\n            });\n\n            const appointments = await response.json();\n            if (!response.ok) {\n                throw new Error(appointments.message);\n            }\n\n            return appointments;\n        } catch (err) {\n            throw(err);\n        }\n    }, [session.authToken]);\n\n    const [state, setState] = useState({\n        appointments: [],\n        limit: 10\n    });\n\n    // If props change, initialize appointments.\n    useEffect(() => {\n        async function load() {\n            try {\n                const newAppointments = await getAppointments({\n                    view: props.view,\n                    search: props.search,\n                    page: 0,\n                    limit: state.limit\n                });\n\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        appointments: newAppointments\n                    }\n                });\n            } catch (err) {\n                console.error(`Failed to load appointments. ${err}`);\n            }\n        }\n\n        load();\n    }, [props.view, props.search, getAppointments, state.limit]);\n\n    async function appendAppointments() {\n        try {\n            const newAppointments = await getAppointments({\n                view: props.view,\n                search: props.search,\n                page: Math.ceil(state.appointments.length / state.limit),\n                limit: state.limit\n            });\n\n            setState(prevState => {\n                const updatedAppointments = [...prevState.appointments, ...newAppointments];\n\n                return {\n                    ...prevState,\n                    appointments: updatedAppointments\n                }\n            });\n        } catch (err) {\n            console.error(`Failed to append more appointments. ${err}`);\n        }\n    }\n\n    async function deleteAppointment(id) {\n        try {\n            setState(prevState => {\n                const updatedAppointments = prevState.appointments.filter(appointment => {\n                    return appointment.id !== id;\n                });\n\n                return {\n                    ...prevState,\n                    appointments: updatedAppointments\n                }\n            });\n        } catch (err) {\n            console.error(`Failed to delete appointment- ${id}. ${err}`);\n        }\n    }\n\n    // Now render view.\n    return (\n        <FluidContainer>\n            <Row>\n                <Col className=\"px-0\">\n                    <ListView\n                        session={session}\n                        appointments={state.appointments}\n                        deleteAppointment={deleteAppointment}\n                        defaultMessage={props.defaultMessage}\n                    />\n                    {(state.appointments.length > 0) &&\n                        <AutoLoader callback={appendAppointments} />\n                    }\n                </Col>\n            </Row>\n        </FluidContainer>\n    );\n}"],"sourceRoot":""}