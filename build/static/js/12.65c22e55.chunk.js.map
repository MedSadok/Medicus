{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/react-table/index.js","../../src/publicUtils.js","../../src/utils.js","../../src/makeDefaultPluginHooks.js","../../src/hooks/useColumnVisibility.js","../../src/hooks/useTable.js","../../src/plugin-hooks/useExpanded.js","../../src/filterTypes.js","../../src/plugin-hooks/useFilters.js","../../src/plugin-hooks/useGlobalFilter.js","../../src/aggregations.js","../../src/plugin-hooks/useGroupBy.js","../../src/sortTypes.js","../../src/plugin-hooks/useSortBy.js","../../src/plugin-hooks/usePagination.js","../../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../../src/plugin-hooks/useRowSelect.js","../../src/plugin-hooks/useRowState.js","../../src/plugin-hooks/useColumnOrder.js","../../src/plugin-hooks/useResizeColumns.js","../../src/plugin-hooks/useAbsoluteLayout.js","../../src/plugin-hooks/useBlockLayout.js","../../src/plugin-hooks/useFlexLayout.js","../../src/plugin-hooks/useGridLayout.js"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","module","exports","require","actions","init","defaultRenderer","value","emptyRenderer","React","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","reduceHooks","initial","allowUndefined","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","ref","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","getPrototypeOf","isReactComponent","$$typeof","includes","description","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","newArr","push","String","d","replace","join","reOpenBracket","reCloseBracket","set","cursor","pathPart","e","row","error","assign","decorateColumn","userDefaultColumn","Footer","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","handleColumn","parentVisible","subColumn","subHeader","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","subHeaders","header","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","undefined","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","col","g","nonGroupByColumns","isGrouped","groupedIndex","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","resKey","reSplitAlphaNumeric","compareBasic","getRowValuesByColumnID","row1","row2","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","alower","blower","replaceNonNumeric","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","u","columnGroup","PivotHeader","uniqueValue","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","raf","mostRecentClientX","headerIdWidths","leafHeaders","recurseHeader","clientX","round","dispatchEnd","window","cancelAnimationFrame","dispatchMove","scheduleDispatchMoveOnNextAnimationFrame","clientXPos","requestAnimationFrame","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","addEventListener","err","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","totalColumnsMinWidth","flex","useGridLayout","gridTemplateColumns","gridLayout","startWidths","gridColumn","getElementWidth","acc","minWidths","maxWidths","headerIdGridWidths","getElementById","offsetWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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","file":"static/js/12.65c22e55.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-table.production.min.js')\n} else {\n  module.exports = require('./dist/react-table.development.js')\n}\n","import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { rowsById } = instance\n\n    const isAllRowsExpanded =\n      Object.keys(rowsById).length === Object.keys(state.expanded).length\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows.map((row) => ({ ...row, depth }))\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (row) {\n        if (!row.isGrouped) {\n          if (shouldExist) {\n            newSelectedRowIds[id] = true\n          } else {\n            delete newSelectedRowIds[id]\n          }\n        }\n\n        if (selectSubRows && getSubRows(row)) {\n          return getSubRows(row).forEach(row => handleRowById(row.id))\n        }\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    let raf\n    let mostRecentClientX\n\n    const dispatchEnd = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnDoneResizing })\n    }\n    const dispatchMove = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnResizing, clientX: mostRecentClientX })\n    }\n\n    const scheduleDispatchMoveOnNextAnimationFrame = clientXPos => {\n      mostRecentClientX = clientXPos\n      if (!raf) {\n        raf = window.requestAnimationFrame(dispatchMove)\n      }\n    }\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => scheduleDispatchMoveOnNextAnimationFrame(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n","import { actions } from '../publicUtils'\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getRowProps.push(getRowProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => {\n  const gridTemplateColumns = instance.visibleColumns.map(column => {\n    if (instance.state.gridLayout.columnWidths[column.id])\n      return `${instance.state.gridLayout.columnWidths[column.id]}px`\n    // When resizing, lock the width of all unset columns\n    // instead of using user-provided width or defaultColumn width,\n    // which could potentially be 'auto' or 'fr' units that don't scale linearly\n    if (instance.state.columnResizing?.isResizingColumn)\n      return `${instance.state.gridLayout.startWidths[column.id]}px`\n    if (typeof column.width === 'number') return `${column.width}px`\n    return column.width\n  })\n  return [\n    props,\n    {\n      style: {\n        display: `grid`,\n        gridTemplateColumns: gridTemplateColumns.join(` `),\n      },\n    },\n  ]\n}\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky`, //enables a scroll wrapper to be placed around the table and have sticky headers\n      gridColumn: `span ${column.totalVisibleHeaderCount}`,\n    },\n  },\n]\n\nconst getRowProps = (props, { row }) => {\n  if (row.isExpanded) {\n    return [\n      props,\n      {\n        style: {\n          gridColumn: `1 / ${row.cells.length + 1}`,\n        },\n      },\n    ]\n  }\n  return [props, {}]\n}\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      gridLayout: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      gridLayout: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { columnId, headerIdWidths } = action\n    const columnWidth = getElementWidth(columnId)\n\n    if (columnWidth !== undefined) {\n      const startWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: getElementWidth(column.id),\n        }),\n        {}\n      )\n      const minWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.minWidth,\n        }),\n        {}\n      )\n      const maxWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.maxWidth,\n        }),\n        {}\n      )\n\n      const headerIdGridWidths = headerIdWidths.map(([headerId]) => [\n        headerId,\n        getElementWidth(headerId),\n      ])\n\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          startWidths,\n          minWidths,\n          maxWidths,\n          headerIdGridWidths,\n          columnWidth,\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX } = state.columnResizing\n    const {\n      columnWidth,\n      minWidths,\n      maxWidths,\n      headerIdGridWidths = [],\n    } = state.gridLayout\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdGridWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.min(\n        Math.max(\n          minWidths[headerId],\n          headerWidth + headerWidth * percentageDeltaX\n        ),\n        maxWidths[headerId]\n      )\n    })\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: {\n          ...state.gridLayout.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        startWidths: {},\n        minWidths: {},\n        maxWidths: {},\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}\n"],"sourceRoot":""}